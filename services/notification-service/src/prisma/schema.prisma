datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

enum InstitutionType {
  UNIVERSITY
  COLLEGE
  SCHOOL
  INSTITUTE
  OTHER
}

enum InstitutionStatus {
  ACTIVE
  INACTIVE
  PENDING
}

enum NotificationType {
  SYSTEM
  DOCUMENT_PUBLISHED
  DOCUMENT_UPDATED
  CHANGE_REQUEST_SUBMITTED
  CHANGE_REQUEST_STATUS_CHANGED
  DEPARTMENT_CREATED
  AUDIT_EVENT
  USER_INVITED
}

enum NotificationPriority {
  HIGH
  MEDIUM
  LOW
}

model Tenant {
  id                  String         @id @default(uuid())
  name                String         @unique
  domain              String         @unique
  logoUrl             String?
  address             String?
  city                String?
  state               String?
  country             String?
  phone               String?
  email               String         @unique
  type                InstitutionType
  accreditationNumber String?        @unique
  establishedYear     Int?
  timezone            String?
  currency            String?
  status              InstitutionStatus @default(PENDING)
  createdBy           String
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt

  users               User[]
  departments         Department[]
  roles               Role[]
  documents           Document[]
  changeRequests      ChangeRequest[] @relation("TenantChangeRequests")
  notifications       Notification[]
  audits              Audit[]
}

model User {
  id                   String         @id @default(uuid())
  email                String         @unique
  password             String
  firstName            String?
  lastName             String?
  verified             Boolean        @default(false)
  mustChangePassword   Boolean        @default(true)
  tenantId             String
  departmentId         String?
  createdBy            String?
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt

  tenant               Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  department           Department?    @relation(fields: [departmentId], references: [id])
  headedDepartment     Department?    @relation("DepartmentHead")
  userRoles            UserRole[]
  notifications        Notification[] @relation("UserNotifications")
  changeRequests       ChangeRequest[] @relation("Proposer")
  audits               Audit[]
  notificationRecipients NotificationRecipient[]
}

model Role {
  id                   String         @id @default(uuid())
  name                 String
  description          String?
  tenantId             String
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt

  tenant               Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  userRoles            UserRole[]
  notificationRecipients NotificationRecipient[]

  @@unique([name, tenantId])
}

model Department {
  id                   String         @id @default(uuid())
  name                 String
  code                 String?        @unique
  tenantId             String
  headId               String?        @unique
  createdBy            String
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt

  tenant               Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  head                 User?          @relation("DepartmentHead", fields: [headId], references: [id])
  users                User[]
  changeRequests       ChangeRequest[] @relation("DepartmentChangeRequests")
  notificationRecipients NotificationRecipient[]
}

model Document {
  id                   String         @id @default(uuid())
  tenantId             String
  title                String
  filePath             String

  tenant               Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  changeRequests       ChangeRequest[]
  notifications        Notification[]
}

model ChangeRequest {
  id                   String         @id @default(uuid())
  documentId           String
  proposerId           String
  departmentId         String
  tenantId             String
  section              String
  justification        String
  status               String

  document             Document       @relation(fields: [documentId], references: [id], onDelete: Cascade)
  proposer             User           @relation("Proposer", fields: [proposerId], references: [id])
  tenant               Tenant         @relation("TenantChangeRequests", fields: [tenantId], references: [id], onDelete: Cascade)
  department           Department     @relation("DepartmentChangeRequests", fields: [departmentId], references: [id])
  notifications        Notification[]
}

model Notification {
  id                   String         @id @default(uuid())
  title                String
  message              String
  type                 NotificationType
  priority             NotificationPriority?
  userId               String?
  tenantId             String
  documentId           String?
  changeRequestId      String?
  auditId              String?   // NEW
  link                 String?
  isRead               Boolean        @default(false)
  createdAt            DateTime       @default(now())
  expiresAt            DateTime?
  deletedAt            DateTime?

  user                 User?          @relation("UserNotifications", fields: [userId], references: [id])
  tenant               Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  document             Document?      @relation(fields: [documentId], references: [id])
  changeRequest        ChangeRequest? @relation(fields: [changeRequestId], references: [id])
  audit                Audit?         @relation("AuditNotifications", fields: [auditId], references: [id]) // NEW
  recipients           NotificationRecipient[]

  @@index([tenantId, createdAt])
  @@index([userId, isRead])
}

model NotificationRecipient {
  id                   String         @id @default(uuid())
  notificationId       String
  userId               String?
  roleId               String?
  departmentId         String?

  notification         Notification   @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  user                 User?          @relation(fields: [userId], references: [id])
  role                 Role?          @relation(fields: [roleId], references: [id])
  department           Department?    @relation(fields: [departmentId], references: [id])
  createdAt            DateTime       @default(now())

  @@unique([notificationId, userId, roleId, departmentId])
}

model Audit {
  id                   String         @id @default(uuid())
  tenantId             String
  userId               String?
  action               String
  entityType           String?
  entityId             String?
  details              String?
  createdAt            DateTime       @default(now())

  tenant               Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user                 User?          @relation(fields: [userId], references: [id])
  notifications        Notification[] @relation("AuditNotifications") // FIXED

  @@index([tenantId, createdAt])
  @@index([userId, action])
}

model UserRole {
  userId               String
  roleId               String
  assignedAt           DateTime       @default(now())

  user                 User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  role                 Role           @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
}
