datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               String         @id @default(uuid())
  email            String         @unique
  password         String
  verified         Boolean        @default(false)
  tenantId         String
  tenantName       String
  firstName        String // Add this field
  lastName         String // Add this field
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  userRoles        UserRole[] // Relation to UserRole table
  refreshTokens    RefreshToken[] // Relation to RefreshToken
  headedDepartment Department?    @relation("DepartmentHead")
  departments      Department[]   @relation("DepartmentUsers")
  otps             OTP[]          @relation("UserOTPs") // Relation to OTP table
  tenant           Tenant         @relation(fields: [tenantId], references: [id]) // Add relation to Tenant
}

model Role {
  id          String     @id @default(uuid())
  name        String
  description String?
  tenantId    String
  userRoles   UserRole[] // Relation to UserRole table
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  tenant      Tenant     @relation(fields: [tenantId], references: [id]) // Add relation to Tenant

  @@unique([name, tenantId])
}

model UserRole {
  userId    String
  roleId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@id([userId, roleId]) // Composite primary key
}

model Department {
  id        String   @id @default(uuid())
  name      String   @unique
  code      String?  @unique
  tenantId  String
  headId    String?  @unique
  head      User?    @relation("DepartmentHead", fields: [headId], references: [id])
  createdBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[]   @relation("DepartmentUsers")
  tenant    Tenant   @relation(fields: [tenantId], references: [id]) // Add relation to Tenant
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model OTP {
  id        String   @id @default(uuid())
  email     String
  code      String
  expiresAt DateTime
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())
  userId    String?
  user      User?    @relation("UserOTPs", fields: [userId], references: [id])

  @@unique([email, createdAt]) // Ensure one OTP per email per creation time
}

model Tenant {
  id          String       @id @default(cuid())
  name        String
  domain      String?      @unique
  email       String?
  type        String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  roles       Role[]
  users       User[]
  departments Department[] // Add this relation to link with Department
}