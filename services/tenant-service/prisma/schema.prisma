datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum InstitutionType {
  UNIVERSITY
  COLLEGE
  SCHOOL
  INSTITUTE
  OTHER
}

enum InstitutionStatus {
  ACTIVE
  INACTIVE
  PENDING
}

model Tenant {
  id                  String    @id @default(uuid())
  name                String    @unique
  domain              String    @unique
  logoUrl             String?
  address             String?
  city                String?
  state               String?
  country             String?
  phone               String?
  email               String    @unique
  type                InstitutionType
  accreditationNumber String?   @unique
  establishedYear     Int?
  timezone            String?
  currency            String?
  status              InstitutionStatus @default(PENDING)
  createdBy           String    // SUPER_ADMIN ID
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  users               User[]
  departments         Department[]
  roles               Role[]
}

model Department {
  id          String    @id @default(uuid())
  name        String
  code        String?   @unique
  tenantId    String
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  headId      String?   @unique
  head        User?     @relation("DepartmentHead", fields: [headId], references: [id])
  createdBy   String    // ADMIN ID who created it
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  users       User[]
}

model Role {
  id          String    @id @default(uuid())
  name        String
  description String?
  tenantId    String
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  userRoles   UserRole[]  // Links to UserRole join table
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  @@unique([name, tenantId])
}

model User {
  id                String      @id @default(uuid())
  email             String      @unique
  password          String
  firstName         String?
  lastName          String?
  verified          Boolean     @default(false)
  mustChangePassword Boolean     @default(true)
  tenantId          String
  tenant            Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  departmentId      String?
  department        Department? @relation(fields: [departmentId], references: [id])
  createdBy         String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  headedDepartment  Department? @relation("DepartmentHead")
  userRoles         UserRole[]  // Links to UserRole join table
}

model UserRole {
  userId    String
  roleId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      Role      @relation(fields: [roleId], references: [id], onDelete: Cascade)
  assignedAt DateTime  @default(now())
  @@id([userId, roleId])  // Composite key allows multiple roles per user
}